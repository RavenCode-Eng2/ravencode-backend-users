import time
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.api import auth, user
from fastapi.responses import Response
from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
from app.core.metrics import REQUEST_COUNT, RESPONSE_TIME, ERROR_COUNT

app = FastAPI(
    title="API de Gesti√≥n de Usuarios RavenCode",
    description="""
API completa para la gesti√≥n de usuarios, autenticaci√≥n y perfiles en la plataforma RavenCode

Esta API proporciona endpoints para:

üîê AUTENTICACI√ìN
‚Ä¢ Registro de usuarios - Crear nuevas cuentas de estudiante
‚Ä¢ Inicio de sesi√≥n - Autenticaci√≥n con JWT tokens
‚Ä¢ Recuperaci√≥n de contrase√±a - Proceso completo de recuperaci√≥n
‚Ä¢ Verificaci√≥n de tokens - Validar tokens JWT

üë§ GESTI√ìN DE USUARIOS
‚Ä¢ CRUD completo - Crear, leer, actualizar y eliminar usuarios (estudiantes y administradores)
‚Ä¢ B√∫squeda por email - Obtener usuarios espec√≠ficos
‚Ä¢ Actualizaci√≥n de perfiles - Modificar informaci√≥n personal
‚Ä¢ Listado de usuarios - Obtener todos los usuarios del sistema


üë§ PERFIL DE USUARIO
‚Ä¢ Informaci√≥n personal - Obtener datos del usuario autenticado
‚Ä¢ Gesti√≥n de perfil - Administrar informaci√≥n del usuario

üîí SEGURIDAD
‚Ä¢ Autenticaci√≥n JWT con tokens de acceso y renovaci√≥n
‚Ä¢ Validaci√≥n de datos con Pydantic
‚Ä¢ Encriptaci√≥n de contrase√±as con bcrypt
‚Ä¢ Protecci√≥n CORS configurada

üìä FORMATOS DE RESPUESTA
Todas las respuestas siguen est√°ndares REST con c√≥digos de estado HTTP apropiados y mensajes de error descriptivos en espa√±ol.

Esta documentaci√≥n est√° completamente en espa√±ol para facilitar su uso por desarrolladores hispanohablantes.
    """,
    version="1.0.0",
    contact={
        "name": "Equipo RavenCode",
        "email": "support@ravencode.com",
    },
    license_info={
        "name": "MIT",
    },
    terms_of_service="/terms",
    openapi_tags=[
        {
            "name": "Authentication",
            "description": "Operaciones de autenticaci√≥n y autorizaci√≥n. Incluye registro, inicio de sesi√≥n, recuperaci√≥n de contrase√±a y verificaci√≥n de tokens.",
        },
        {
            "name": "Users",
            "description": "Operaciones CRUD para usuarios. Gesti√≥n completa de perfiles de usuarios (estudiantes y administradores) incluyendo creaci√≥n, consulta, actualizaci√≥n, eliminaci√≥n y listado.",
        }
    ]
    title="API de Gesti√≥n de Usuarios RavenCode",
    description="""
API completa para la gesti√≥n de usuarios, autenticaci√≥n y perfiles en la plataforma RavenCode

Esta API proporciona endpoints para:

üîê AUTENTICACI√ìN
‚Ä¢ Registro de usuarios - Crear nuevas cuentas de estudiante
‚Ä¢ Inicio de sesi√≥n - Autenticaci√≥n con JWT tokens
‚Ä¢ Recuperaci√≥n de contrase√±a - Proceso completo de recuperaci√≥n
‚Ä¢ Verificaci√≥n de tokens - Validar tokens JWT

üë§ GESTI√ìN DE USUARIOS
‚Ä¢ CRUD completo - Crear, leer, actualizar y eliminar usuarios (estudiantes y administradores)
‚Ä¢ B√∫squeda por email - Obtener usuarios espec√≠ficos
‚Ä¢ Actualizaci√≥n de perfiles - Modificar informaci√≥n personal
‚Ä¢ Listado de usuarios - Obtener todos los usuarios del sistema


üë§ PERFIL DE USUARIO
‚Ä¢ Informaci√≥n personal - Obtener datos del usuario autenticado
‚Ä¢ Gesti√≥n de perfil - Administrar informaci√≥n del usuario

üîí SEGURIDAD
‚Ä¢ Autenticaci√≥n JWT con tokens de acceso y renovaci√≥n
‚Ä¢ Validaci√≥n de datos con Pydantic
‚Ä¢ Encriptaci√≥n de contrase√±as con bcrypt
‚Ä¢ Protecci√≥n CORS configurada

üìä FORMATOS DE RESPUESTA
Todas las respuestas siguen est√°ndares REST con c√≥digos de estado HTTP apropiados y mensajes de error descriptivos en espa√±ol.

Esta documentaci√≥n est√° completamente en espa√±ol para facilitar su uso por desarrolladores hispanohablantes.
    """,
    version="1.0.0",
    contact={
        "name": "Equipo RavenCode",
        "email": "support@ravencode.com",
    },
    license_info={
        "name": "MIT",
    },
    terms_of_service="/terms",
    openapi_tags=[
        {
            "name": "Authentication",
            "description": "Operaciones de autenticaci√≥n y autorizaci√≥n. Incluye registro, inicio de sesi√≥n, recuperaci√≥n de contrase√±a y verificaci√≥n de tokens.",
        },
        {
            "name": "Users",
            "description": "Operaciones CRUD para usuarios. Gesti√≥n completa de perfiles de usuarios (estudiantes y administradores) incluyendo creaci√≥n, consulta, actualizaci√≥n, eliminaci√≥n y listado.",
        }
    ]
)

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # In production, replace with specific origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include routers
app.include_router(auth.router, prefix="/auth", tags=["Authentication"])
app.include_router(user.router, prefix="/users", tags=["Users"])


# Middleware para registrar m√©tricas
@app.middleware("http")
async def record_metrics(request, call_next):
    method = request.method
    endpoint = request.url.path

    # Registrar la hora de inicio para medir el tiempo de respuesta
    start_time = time.time()

    # Continuar con la solicitud
    response = await call_next(request)

    # Medir tiempo de respuesta
    duration = time.time() - start_time
    RESPONSE_TIME.labels(method=method, endpoint=endpoint).observe(duration)

    # Incrementar contador de peticiones
    REQUEST_COUNT.labels(method=method, endpoint=endpoint).inc()

    # Si hay un error (c√≥digo de estado >= 400), aumentar el contador de errores
    if response.status_code >= 400:
        ERROR_COUNT.labels(method=method, endpoint=endpoint).inc()

    return response

# Ruta para exponer las m√©tricas en formato Prometheus
@app.get("/metrics")
async def metrics():
    data = generate_latest()
    return Response(content=data, media_type=CONTENT_TYPE_LATEST)


# Middleware para registrar m√©tricas
@app.middleware("http")
async def record_metrics(request, call_next):
    method = request.method
    endpoint = request.url.path

    # Registrar la hora de inicio para medir el tiempo de respuesta
    start_time = time.time()

    # Continuar con la solicitud
    response = await call_next(request)

    # Medir tiempo de respuesta
    duration = time.time() - start_time
    RESPONSE_TIME.labels(method=method, endpoint=endpoint).observe(duration)

    # Incrementar contador de peticiones
    REQUEST_COUNT.labels(method=method, endpoint=endpoint).inc()

    # Si hay un error (c√≥digo de estado >= 400), aumentar el contador de errores
    if response.status_code >= 400:
        ERROR_COUNT.labels(method=method, endpoint=endpoint).inc()

    return response

# Ruta para exponer las m√©tricas en formato Prometheus
@app.get("/metrics")
async def metrics():
    data = generate_latest()
    return Response(content=data, media_type=CONTENT_TYPE_LATEST)

@app.get(
    "/",
    summary="P√°gina de inicio de la API",
    description="Endpoint ra√≠z que proporciona informaci√≥n b√°sica sobre la API y enlaces √∫tiles",
    response_description="Mensaje de bienvenida y enlaces de documentaci√≥n",
    tags=["General"]
)
async def root():
    """
    Endpoint de Bienvenida
    
    Proporciona informaci√≥n b√°sica sobre la API y enlaces a la documentaci√≥n.
    
    Respuesta:
    - message: Mensaje de bienvenida
    - docs_url: URL de la documentaci√≥n Swagger UI
    - redoc_url: URL de la documentaci√≥n ReDoc
    """
    return {
        "message": "Bienvenido a la API de Gesti√≥n de Usuarios RavenCode",
        "description": "API para gesti√≥n de usuarios, autenticaci√≥n y perfiles",
        "version": "1.0.0",
        "docs_url": "/docs",
        "redoc_url": "/redoc"
    }

@app.get(
    "/health",
    summary="Estado de salud de la API",
    description="Endpoint para verificar el estado de la API y la conectividad de la base de datos",
    response_description="Estado de la API y sus dependencias",
    tags=["General"]
)
async def health():
    """
    Endpoint de Salud
    
    Verifica que la API est√© funcionando correctamente y que pueda conectarse a la base de datos.
    
    Respuesta:
    - status: Estado general de la API
    - database: Estado de la conexi√≥n a MongoDB
    - timestamp: Momento de la verificaci√≥n
    """
    from app.DB.database import test_connection
    from datetime import datetime
    
    database_status = "healthy" if test_connection() else "unhealthy"
    overall_status = "healthy" if database_status == "healthy" else "unhealthy"
    
    return {
        "status": overall_status,
        "database": database_status,
        "service": "RavenCode Users API",
        "version": "1.0.0",
        "timestamp": datetime.utcnow().isoformat()
    }
